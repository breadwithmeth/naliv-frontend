// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ API –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞

import { useState, useEffect } from 'react'
import { createApiUrlWithParams } from '../utils/api'

interface Address {
  address_id: number
  name: string
  address: string
  apartment?: string
  entrance?: string
  floor?: string
  other?: string
  delivery?: {
    available: boolean
    price: number
    delivery_type: string
    distance: number
    zone_name: string
  }
}

// üõí –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ (–Ω–æ–≤—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
 * @param businessId ID –º–∞–≥–∞–∑–∏–Ω–∞
 * @param userToken –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ú–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
 */
const getAddressesForOrder = async (
  businessId: number,
  userToken: string
): Promise<Address[]> => {
  const response = await fetch(
    createApiUrlWithParams('/api/addresses/user/with-delivery', {
      business_id: businessId,
    }),
    {
      headers: {
        Authorization: `Bearer ${userToken}`,
      },
    }
  )

  const data = await response.json()

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–¥—Ä–µ—Å–∞, –≥–¥–µ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
  return data.data.addresses.filter((addr: Address) => addr.delivery?.available)
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞
 */
export const AddressSelectionExample = ({
  businessId,
  onAddressSelect,
}: {
  businessId: number
  onAddressSelect: (address: Address) => void
}) => {
  const [addresses, setAddresses] = useState<Address[]>([])
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const fetchAddresses = async () => {
      setLoading(true)
      try {
        const userToken = localStorage.getItem('token')
        if (userToken) {
          const result = await getAddressesForOrder(businessId, userToken)
          setAddresses(result)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchAddresses()
  }, [businessId])

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤...</div>
  }

  return (
    <div>
      <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
      {addresses.map(address => (
        <div key={address.address_id} className="address-option">
          <h4>{address.name}</h4>
          <p>{address.address}</p>
          {address.delivery && (
            <p>
              –î–æ—Å—Ç–∞–≤–∫–∞:{' '}
              {address.delivery.price === 0
                ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
                : `${address.delivery.price} —Ç–µ–Ω–≥–µ`}
            </p>
          )}
          <button onClick={() => onAddressSelect(address)}>
            –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
          </button>
        </div>
      ))}
    </div>
  )
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
export const OrderFormExample = () => {
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null)
  const [businessId] = useState(1) // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

  const handleAddressSelect = (address: Address) => {
    setSelectedAddress(address)
    console.log('–í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:', address)

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
    // - –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    // - –û–±–Ω–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    // - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  }

  return (
    <div>
      <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>

      {selectedAddress ? (
        <div className="selected-address">
          <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</h3>
          <p>
            <strong>{selectedAddress.name}</strong>
          </p>
          <p>{selectedAddress.address}</p>
          {selectedAddress.delivery && (
            <p>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {selectedAddress.delivery.price} ‚Ç∏</p>
          )}
          <button onClick={() => setSelectedAddress(null)}>
            –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
          </button>
        </div>
      ) : (
        <AddressSelectionExample
          businessId={businessId}
          onAddressSelect={handleAddressSelect}
        />
      )}
    </div>
  )
}

export default {
  getAddressesForOrder,
  AddressSelectionExample,
  OrderFormExample,
}
